System and Device Programming
Laboratory Week 14

Laboratory target:
- Building and using DLLs


Exercise 01 (simple DLL: implicit and explicit linking)
------------------------------

Write a simple program that exploits a sorting function (e.g. bubble, 
insertion or selection sort), implemented in a DLL module.

A DLL contains compiled functions that can be reused by many different applications.
The rules to write and build a DLL module can be found in
http://msdn.microsoft.com/en-us/library/aa294382(v=vs.60).aspx

The __declspec(dllexport) / __declspec(dllimport) technique is suggested.

The DLL file (sortDll.c) should include a function

void sort (int *v, int n);

that implements a sort algorithm. The file has to be properly compiled.
To generate the DLL outputs, select the Build option from the Build menu on the menu bar. 
Note that there two significant output files created when building a DLL: a .dll file and a .lib file. 
The .dll file contains the compiled functions that were implemented in the project source code. 
The .lib file is known as an import library. 
An import library is used when linking a program that makes calls to the functions exported by a DLL. 
The import library provides information to the linker about the function signatures and function 
locations within the compiled DLL code.
In order for a client application to use the DLL that has been created, the following files must be 
supplied to the client application programmer:
	•	header files that declare the functions exported by the DLL

	•	the .dll file generated by the linker

	•	the .lib file generated by the linker

The header files, the .lib file, and the .dll file should be copied into the project directory of the client application. 
Add the .h and .lib files to the client application project.
In order to use the functions defined in the DLL, the source code in the client application should include the 
header file(s) copied from the DLL project. After the client project is compiled and linked, it can be executed. 
When the application is loaded by the operating system, the operating system will automatically load the necessary DLL file.
Try implicit linking and explicit linking.
For explicit linking, use functions:
HINSTANCE LoadLibrary (LPCTSTR lpLibFileName);
FARPROC GetProcAddress (HMODULE hModule,LPCSTR lpProcName);


Exercise 02 (file buffer)
-----------

Build a DLL that works as a buffer to a file:
the DLL should provide functions

LPVOID CreateBuffer(HANDLE f, DWORD bufSize); // called for an open file
BOOL ReadFileBuffered(HANDLE f, LPVOID buf, 
              DWORD nBytesToRead, LPDWORD nBytesRead);
FreeBuffer(LPVOID buf);

The buffer is allocated of a given size. File reads are done in the buffer, for a size “bufSize” 
(unless end-of-file is reached).
ReadFileBuffered reads data from buffer, if available. If not the empty buffer is filled by another read from file.

The DLL has to be tested by an application file that:

- opens the file
- creates a buffer
- reads the entire file (supposed to be a text file) by single characters (counting lines).
- frees the buffer and closes the file.
