System and Device Programming
Laboratory Week 12

Laboratory target:
- Synchronizing threads with semaphores and events
- Error handling
- Concurrent programming with processes and synchronization
  through file locking




Exercise 01 (versions A and B)
------------------------------

A concurrent program runs 4 threads.
Each thread iterates through a cycle waiting for 32-bit integer
values.
Moreover:
- the first thread computes the sum of those values and for each number
  received it prints-out (on standard output) the partial sum of the
  numbers received until that moment
- the second thread computes and prints-out (on standard output)
  the partial product of the numbers
- the third thread computes and prints-out (on standard output)
  the factorial of the numbers
- the fourth thread prints-out (on standard output) a number
  of '#' symbols equal to that number on the same standard
  output line.

The four threads have to synchronize with a main thread which is in
charge of reading the numbers from a file.
The file name is received on the command line and it stores the
sequence of integer 32-bit numbers.
When the sequence ends the main thread has to end the four "secondary"
threads and the main program.

Implement two versions of the program:

- Version A:
  Use semaphores (only) to solve all synchrnonization problems

- Version B:
  Using Windows-32 events (and semaphore if necessary).

Suggestions:
1) notice that the 4 secondary threads have to wait numbers coming
   from the main thread, but the main thread has to wait those
   threads to do their job before reading the next value from
   file
2) are 2 semaphores sufficient to synchronize them all?



Exercise 02
-----------

A file contains a sequence of 32-bit values in binary form.
A program receives a file name on the command line and runs
two threads:

* The first thread:
  - Reads from the file pairs of value n1, n2
  - Computes their ratios n1/n2
  - Prints-out on standard output n1, n2 and n1/n2

  The thread has to handle exceptions for:
  - Trying to opening a non-existing file, file handle exception
  - Performing a division by zero, mathematical exception
  - Reading file with an odd number of value (the n2 value for
    the last pair does not exist)

* The second thread
  - Considers the first integer stored in the file as an array size
  - Dynamically allocates an array of that size
  - Stores all subsequent values within the file into the array
  - Orders the array and prints it out on standard output.

  The thread has to handle exceptions for:
  - Wrong (array) memory allocation
  - Wrong memory access, during array element read or write
  - Reading a number of values from file larger than the array
    size, i.e., array bound exception.

Notice that when one thread handles an exception it has to force
to a clean termination the other thread, i.e., memory has to be
free (no memory leaks), files have to be closed, etc.



Exercise 03
-----------

Write a client-server application, based on two *processes*
which communicate using an intermediate file.

Process A (the client) works as follow:
- It opens a temporary file for writing (use GetTempFileName to
  obtain a unique file name).
- It starts Process B passing as argument the name of the file.
- It reads from standard input strings of characters, and it writes
  those strings on the intermediate file.
  Use string of constant length (e.g., #define MAX_LEN 100).
- It stops reading strings from standard input when it receives an
  end-of-file (ctrl-Z).
- Before terminating, it writes the string
  ".end"
  as last line of the file.

Process B (the server) works as follows:
- It opens the intermediate file for reading.
- It reads lines as soon as they are available, and it prints them
  out on standard output.

Suggestions:
- Process A keeps the file open, and it always locks the next part of
  the file before unlocking the previous part.
- Process B runs in parallel, and it reads a shared file, waiting to
  have access to single lines to read them.

